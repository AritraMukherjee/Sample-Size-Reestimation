ssre_sigma_delay <- function(n1 ,                   # First stage sample size in each arm
                             alpha ,                # Type I error 
                             beta ,                 # Type II error
                             delta ,                # Target treatment effect(Assumed)
                             sigma,                 # Assumed variance in the planning stage
                             tau ,                  # True treatment effect
                             sigma_true ,           # True variance of the underlying population  
                             estimator ,            # "one_sample" or "unblinded"
                             inflation = FALSE,     # inflation factor
                             replicates ,           # No. of simulations
                             recruitment,           # "uniform" or "linear"
                             t,                     # Total recruitment time 
                             m0)                    # Delay length
{
  sigma_hat        <- reject <-   case<- numeric(replicates)
  two_n1           <- 2*n1
  N                <- rep(two_n1, replicates)
  n_single         <- 4*((qnorm(1 - alpha) + qnorm(1 - beta))/delta)^2*sigma^2            #equivalent two-arm single stage/ traditional RCT
  n_oracle         <- 4*((qnorm(1 - alpha) + qnorm(1 - beta))/tau)^2*sigma_true^2         #the ideal/ oracle sample size required for the design
  nmin             <- 2*n1                                                                #minimum sample size for the trial
  nmax             <- 1e10                                                                #maximum sample size for the trial, can be fixed at a multiple of n_single.
  power            <- numeric(replicates)
  if (estimator == "one_sample") {
    df             <- two_n1 - 1
  }
  else if (estimator == "unblinded") {
    df             <- two_n1 - 2
  }
  sqrt_inv_df      <- sqrt(1/df)
  n_factor         <- 4*((qnorm(1 - alpha) + qnorm(1 - beta))/delta)^2
  if (!inflation) {
    inflation_fac  <- 1
  }
  else {
    inflation_fac  <- (qt(1 - alpha, df) + qt(1 - beta, df))^2/
      (qnorm(1 - alpha) + qnorm(1 - beta))^2
  }
  # Simulating samples to compute the re-estimated sample size through computing variance
  for (i in 1:replicates) 
  {
    x01            <- rnorm(n1, sd = sigma_true)
    x11            <- rnorm(n1, tau, sigma_true)
    
    # Estimated/ observed variance for computing re-estimated sample size
    if (estimator == "one_sample") {
      sigma_hat[i] <- sqrt_inv_df*sqrt(sum((c(x01, x11) -
                                              mean(c(x01, x11)))^2))
    }
    else if (estimator == "unblinded") {
      sigma_hat[i] <- sqrt_inv_df*sqrt(sum((x01 - mean(x01))^2) +
                                         sum((x11 - mean(x11))^2))
    }
    
    # re-estimated total sample size  
    n              <- ceiling(inflation_fac*n_factor*sigma_hat[i]^2)
    
    # Obtaining the second stage sample size in each arm
    if (n < nmin) {
      n2         <- ceiling(0.5*(nmin - two_n1))
    }
    else {
      if (nmax != Inf) {
        if (n > nmax) {
          n2     <- ceiling(0.5*(nmax - two_n1))
        }
        else {
          n2     <- ceiling(0.5*(n - two_n1))
        }
      }
      else {
        n2       <- ceiling(0.5*(n - two_n1))
      }
    }
    #assuming the total recruitment is done for a single stage design with equivalent parameters
    #and overrun was allowed till maximum sample size permitted
    overrun_uniform <- function(n, t, m0) {
      # Find recruitment rate
      lambda <- n/t
      # Find the number of patients recruited
      n0     <- lambda*m0
      if (n0 <= (nmax-two_n1)) {
        n0=n0
      } else {
        n0=nmax-two_n1
      }
      return(n0)
    }
    
    overrun_linear  <- function(n, t, m0) {
      # Find delta
      delta_hat <- 2*n/(t*(t+1))
      # Find t1
      t1    <- -1/2 + 1/2*sqrt(1 + 4*two_n1/delta_hat)
      # Find the number of patients recruited
      n0    <- m0*delta_hat*t1 + delta_hat*m0*(m0 + 1)/2
      if (n0 <= (nmax-two_n1)) {
        n0
      } else {
        n0=nmax-two_n1
      }
      return(n0)
    }
    
    
    # computing the number of overruns   
    n_delay=numeric(1) 
    if(recruitment=="uniform")
      n_delay=overrun_uniform(n_single,t,m0)
    if(recruitment=="linear")
      n_delay=overrun_linear(n_single,t,m0)
    
    
    
    # finding the second stage sample size as n2 if the number of overruns is smaller and n_delay if the
    # second stage sample size is smaller
    if (n2 > 0) {
      if(2*n2 >= n_delay)
      {
        N[i]         <- N[i] + 2*n2
        x0           <- c(x01, rnorm(n2, sd = sigma_true))
        x1           <- c(x11, rnorm(n2, tau, sigma_true))
        S02          <- var(x0)
        S12          <- var(x1)
        Spool        <- sqrt((0.5*N[i] - 1)*(S02 + S12)/(N[i] - 1))
        reject[i]    <- (sqrt(1/N[i])*(sum(x1) - sum(x0))/Spool >=
                           qt(1 - alpha, N[i] - 2))
        case[i]      <- 1
        power[i]     <- pwr::pwr.t.test(n=0.5*N[i],d=tau/Spool,sig.level = alpha,type ="two.sample" ,alternative = "greater")$power
      }
      else
      {
        N[i]         <- N[i] + n_delay
        x0           <- c(x01, rnorm(0.5*n_delay, sd = sigma_true))
        x1           <- c(x11, rnorm(0.5*n_delay, tau, sigma_true))
        S02          <- var(x0)
        S12          <- var(x1)
        Spool        <- sqrt((0.5*N[i] - 1)*(S02 + S12)/(N[i] - 1))
        reject[i]    <- (sqrt(1/N[i])*(sum(x1) - sum(x0))/Spool >=
                           qt(1 - alpha, N[i] - 2))
        case[i]      <- 2
        power[i]     <- pwr::pwr.t.test(n=0.5*N[i],d=tau/Spool,sig.level = alpha,type ="two.sample" ,alternative = "greater")$power
      }
      
    }
    else {
      N[i]         <- N[i] + n_delay
      x0           <- c(x01, rnorm(0.5*n_delay, sd = sigma_true))
      x1           <- c(x11, rnorm(0.5*n_delay, tau, sigma_true))
      S02          <- var(x0)
      S12          <- var(x1)
      Spool        <- sqrt((0.5*N[i] - 1)*(S02 + S12)/(N[i] - 1))
      reject[i]    <- (sqrt(1/N[i])*(sum(x1) - sum(x0))/Spool >=
                         qt(1 - alpha, N[i] - 2))
      power[i]     <- pwr::pwr.t.test(n=0.5*N[i],d=tau/Spool,sig.level = alpha,type ="two.sample" ,alternative = "greater")$power
      case[i]      <- 3
    }
    
    
    cost=(N-n_oracle)^2/(power*100)
    MSE_N=(N-n_oracle)^2
    power_single = pwr::pwr.t.test(n=0.5*n_single,d=tau/mean(sigma_hat),sig.level = alpha,type ="two.sample" ,alternative = "greater")$power
    cost_single= (n_single-n_oracle)^2/(power_single*100)
    MSE_single=(n_single-n_oracle)^2
  }
  

  
  list(empirical_power = mean(reject),delay=m0,n_single=n_single,n_oracle=n_oracle,average_N_hat = mean(N),n_delay=n_delay,
       # N_hat=N, decision=reject,case=case,  #can use this line to observe the full distribution value of the re-estimated sample size
       average_sigma_hat = mean(sigma_hat),MSE_single=(MSE_single),MSE_N=(mean(MSE_N)), cost_single=cost_single, cost_SSR=mean(cost),delay_impact=length((which(case!=1)))/length(case))
  
}
# Here, delay impact is the proportion of trials that takes the pipeline patients with the first stage sample size as their final sample size

#===================================================Example Parameters===================================================================


n1 = 35
alpha = 0.05
beta = 0.2 
delta = 3.5
sigma = 10
tau = 3.5
sigma_true = 8
estimator = "one_sample"   #or "unblinded" 
inflation = FALSE
replicates = 10000
recruitment="uniform"      #or "linear"
t=24
m0=10

example=as.data.frame(ssre_sigma_delay(n1 , alpha , beta , delta , sigma,
                                       tau , sigma_true , estimator ,
                                       inflation = FALSE, 
                                       replicates ,recruitment, t, m0))
View(example)


