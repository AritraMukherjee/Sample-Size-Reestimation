ssre_bin_delay <- function(n1 ,                   # First stage sample size in each arm
                           alpha ,                # Type I error 
                           beta ,                 # Type II error
                           p0,                    # control success rate (Assumed in the planning stage)
                           delta ,                # Target treatment effect (Assumed in the planning stage)(lies between 0 to 1-p0)
                           p0_true,               # true success rate of the underlying population
                           inflation = FALSE,     # inflation factor
                           replicates ,           # No. of simulations
                           recruitment,           # "uniform" or "linear"
                           t,                     # Total recruitment time
                           m0)                    # Delay length
{
  p_hat            <- reject <-   case<- numeric(replicates)
  two_n1           <- 2*n1
  N                <- rep(two_n1, replicates)
  n_single         <- 2*((qnorm(1 - alpha)*sqrt(2*(p0+delta/2)*(1-(p0+delta/2))) + qnorm(1 - beta)*sqrt(p0*(1-p0)+(p0+delta)*(1-p0-delta)))/delta)^2
  n_oracle         <- 2*((qnorm(1 - alpha)*sqrt(2*(p0_true+delta/2)*(1-(p0_true+delta/2))) + qnorm(1 - beta)*sqrt(p0_true*(1-p0_true)+(p0_true+delta)*(1-p0_true-delta)))/delta)^2
  nmin             <- 2*n1
  nmax             <- 1e10
  power            <- test    <- numeric(replicates)
  n                <- numeric(replicates)
  
  
  
  for (i in 1:replicates) 
  {
    x01            <- rbinom(n1, 1 ,p0_true)
    x11            <- rbinom(n1, 1,(p0_true+delta))
    
    p_hat[i]      <-(sum(x01)+sum(x11))/(2*n1)
    
    #re-estimated total sample size using a pooled estimate for a blinded SSR
    
    n[i]= 2*ceiling(((qnorm(1 - alpha) + qnorm(1 - beta))/delta)^2*(2*p_hat[i]*(1-p_hat[i])))
    n2<- numeric()
    
    
    # Obtaining the second stage sample size in each arm
    if (n[i] < nmin) {
      n2[i]         <- ceiling(0.5*(nmin - two_n1))
    }
    else {
      if (nmax != Inf) {
        if (n[i] > nmax) {
          n2[i]    <- ceiling(0.5*(nmax - two_n1))
        }
        else {
          n2[i]     <- ceiling(0.5*(n[i] - two_n1))
        }
      }
      else {
        n2[i]       <- ceiling(0.5*(n[i] - two_n1))
      }
    }
    
    #assuming the total recruitment is done for a single stage design with equivalent parameters
    #and overrun was allowed till maximum sample size permitted
    overrun_uniform <- function(n, t, m0) {
      # Find recruitment rate
      lambda <- n/t
      # Find the number of patients recruited
      n0     <- lambda*m0
      if (n0 <= (nmax-two_n1)) {
        n0=n0
      } else {
        n0=nmax-two_n1
      }
      return(n0)
    }
    
    overrun_linear  <- function(n, t, m0) {
      # Find delta
      delta_hat <- 2*n/(t*(t+1))
      # Find t1
      t1    <- -1/2 + 1/2*sqrt(1 + 4*two_n1/delta_hat)
      # Find the number of patients recruited
      n0    <- m0*delta_hat*t1 + delta_hat*m0*(m0 + 1)/2
      if (n0 <= (nmax-two_n1)) {
        n0
      } else {
        n0=nmax-two_n1
      }
      return(n0)
    }
    
    
    # computing the number of overruns   
    n_delay=numeric(1) 
    if(recruitment=="uniform")
      n_delay=overrun_uniform(n_single,t,m0)
    if(recruitment=="linear")
      n_delay=overrun_linear(n_single,t,m0)
    
    
    
    # finding the second stage sample size as n2 if the number of overruns is smaller and n_delay if the
    # second stage sample size is smaller
    if (n2[i] > 0) {
      if(2*n2[i] >= n_delay)
      {
        N[i]         <- N[i] + 2*n2[i]
        x0           <- c(x01, rbinom(n2[i], 1, p0_true))
        x1           <- c(x11, rbinom(n2[i], 1, (p0_true+delta)))
        p_hat[i]     <- 1/N[i]*(sum(x0)+sum(x1))
        test[i]      <-(mean(x1)-mean(x0))/sqrt(2*p_hat[i]*(1-p_hat[i])/(N[i]/2)) 
        reject[i]    <- test[i]>=qnorm(1 - alpha)
        case[i]      <- 1
        power[i]     <- power.prop.test(n=N[i]/2,p1=p0_true,p2=(p0_true+delta),sig.level=0.05,alternative = "one.sided")$power
      }
      else
      {
        N[i]         <- N[i] + n_delay
        x0           <- c(x01, rbinom(0.5*n_delay, 1, p0_true))
        x1           <- c(x11, rbinom(0.5*n_delay, 1, (p0_true+delta)))
        p_hat[i]     <- 1/N[i]*(sum(x0)+sum(x1)) 
        test[i]      <- (mean(x1)-mean(x0))/sqrt(2*p_hat[i]*(1-p_hat[i])/(N[i]/2))
        reject[i]    <- test[i] >= qnorm(1 - alpha)
        case[i]      <- 2
        power[i]     <- power.prop.test(n=N[i]/2,p1=p0_true,p2=(p0_true+delta),sig.level=0.05,alternative = "one.sided")$power
      }
      
    }
    else {
      N[i]            <- N[i] + n_delay
      x0           <- c(x01, rbinom(0.5*n_delay, 1, p0_true))
      x1           <- c(x11, rbinom(0.5*n_delay, 1, (p0_true+delta)))
      p_hat[i]     <- 1/N[i]*(sum(x0)+sum(x1)) 
      test[i]      <- (mean(x1)-mean(x0))/sqrt(2*p_hat[i]*(1-p_hat[i])/(N[i]/2))
      reject[i]    <- test[i] >= qnorm(1 - alpha)
      power[i]     <- power.prop.test(n=N[i]/2,p1=p0_true,p2=(p0_true+delta),sig.level=0.05,alternative = "one.sided")$power
      case[i]      <- 3
    }
  }
  
  cost=(N-n_oracle)^2/(power*100)
  MSE_N=(N-n_oracle)^2
  power_single = power.prop.test(n=n_single/2,p1=p0_true,p2=p0_true+delta,sig.level=0.05,alternative = "one.sided")$power
  cost_single= (n_single-n_oracle)^2/(power_single*100)
  MSE_single=(n_single-n_oracle)^2
  empirical_power=length(which(reject==1))/replicates
  
  list(p0=p0,p0_true=p0_true,average_p_hat=mean(p_hat),empirical_power = empirical_power,delay=m0,n_single=n_single,n_oracle=n_oracle,n_delay=n_delay,
       average_N_hat=mean(N),MSE_single=(MSE_single),MSE_N=mean(MSE_N), 
       #n2=n2,decision=reject,p_hat = p_hat,power=power,N_hat = N,case=case,                 #uncomment this line to see all the re-estimated sample sizes
       cost_single=cost_single, cost_SSR=mean(cost),
       delay_impact=length((which(case!=1)))/length(case))
  
}


#=========================================================Example Parameters================================================================


n1 = 15
alpha = 0.05
beta = 0.2 
p0=0.3
delta = 0.35
p0_true = 0.1
inflation = FALSE
replicates = 10000
recruitment="uniform"      #or "linear"
t=24
m0=0

example=as.data.frame(ssre_bin_delay(n1 , alpha , beta , p0 , delta ,
                                     p0_true ,
                                     inflation = FALSE, 
                                     replicates ,recruitment, t, m0))

View(example)


